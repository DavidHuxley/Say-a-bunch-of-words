<!doctype html>
<html>

<head>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">


  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css"
    integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://unpkg.com/axios@1.1.2/dist/axios.min.js"></script>
  <script src="https://kit.fontawesome.com/8496074dee.js" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="/public/stylesheets/main.css">
  <link rel="stylesheet" href="/public/stylesheets/detail.css">
  <link rel="stylesheet" href="/public/stylesheets/search.css">
  <script src="https://unpkg.com/luxon"></script>
  <link rel="shortcut icon" href="/assets/icon/favi.ico">
  <script>
    window.luxon = luxon;
  </script>
  <title>Say a bunch of words</title>
</head>

<body>

  <%- include('nav.ejs') %>

    <div id="container">
      <div id="topSection">
        <div id="topSide">
          <div class="search-wrapper">
            <div class="input-holder">
              <input type="text" class="search-input" placeholder="Search a bunch of words!" />
              <button class="search-icon" onclick="searchToggle(this, event);"><span id="searchIcon"></span></button>
            </div>
            <span class="close" onclick="searchToggle(this, event);"></span>
          </div>
        </div>
      </div>
      <div id="mainSection">
        <div id="leftSide"></div>
        <div id="main">
          <div id="wrap">
            <div class="card">
              <div class="front">
                <div id="frontImg">
                  <label id="cardImgUpload" style="background-image: url('<%= POST.img %>')"></label>
                </div>
                <div id="frontText">
                  <div id="writingTime">
                    <% const currentTime=luxon.DateTime.local().toISO(); %>
                    <% const postTime=luxon.DateTime.fromISO(POST.time); %>
                    <% const duration=luxon.DateTime.fromISO(currentTime).diff(luxon.DateTime.fromISO(postTime)); %>
                    <% let timeAgo=''; %>
                    <% if (duration.as('seconds') < 60) { timeAgo='just before'; } 
                    else if (duration.as('minutes') < 60) { 
                      const minutes = Math.floor(duration.as('minutes'));
                      timeAgo = minutes === 1 ? `${minutes} minute ago` : `${minutes} minutes ago`; 
                    } 
                    else if (duration.as('hours') < 24) {
                      const hours = Math.floor(duration.as('hours'));
                      timeAgo = hours === 1 ? `${hours} hour ago` : `${hours} hours ago`; 
                    } 
                    else if (duration.as('days') < 7) { 
                      const days = Math.floor(duration.as('days'));
                      timeAgo = days === 1 ? `${days} day ago` : `${days} days ago`; 
                    } 
                    else if (duration.as('weeks') < 4) {
                      const weeks = Math.floor(duration.as('weeks'));
                      timeAgo = weeks === 1 ? `${weeks} week ago` : `${weeks} weeks ago`; 
                    } 
                    else if (duration.as('months') < 12) {
                      const months = Math.floor(duration.as('months'));
                      timeAgo = months === 1 ? `${months} month ago` : `${months} months ago`; 
                    } 
                    else {
                      timeAgo = 'long time ago'; 
                    } %>
                              <span id="writeTime">
                                <%= timeAgo %>
                              </span>
                              <span id="writeTimeHover">
                                <%= luxon.DateTime.fromISO(POST.time).toFormat('yyyy-MM-dd HH:mm') %>
                              </span>
                  </div>
                  <div id="frontContent">
                    <div id="frontTitle">
                      <%= POST.title %>
                    </div>
                  </div>
                  <div id="writerDiv">
                    <span id="writer" data-id="<%= POST.writer %>">
                      <%= POST.writer %>
                    </span>
                    <img src='<%= WRITER.profileImg %>'>
                  </div>
                </div>
              </div>
            </div>
            <div class="card flipped">
              <div class="back">
                <div id="backContent">
                  <div id="backContentText">
                    <span>
                      <%= POST.content %>
                    </span>
                  </div>
                </div>
                <div id="backBtnBundle">
                  <div class="backBtnSpan">
                    <span>view <%= POST.views %></span>
                    <span id="backBtnSpanComment">comment <%= POST.comment %></span>
                    <span id="backBtnSpanLike">like <%= POST.like %></span>
                  </div>
                  <div class="backBtnI">
                    <% if (POST.writer===cUSER.nickname) { %>
                      <i class="fa-regular fa-trash-can postDeleteBtn"
                        data-id="<%= POST._id %>" style="color: rgba(255, 0, 0, .5);"></i>
                      <% } %>
                    <i class="fa-regular fa-comment-dots backBtnComment" data-id="<%= POST._id %>"
                      style="color: #ececec;"></i>
                    <% const likePosts=cUSER.likePosts.includes(POST._id); %>
                      <% if (likePosts) { %>
                        <!-- 이미 좋아요 눌렀던 게시물일 경우 -->
                        <i class="fa-solid fa-heart" id="backBtnHeart" data-id="<%= POST._id %>"
                          style="color: rgba(255, 0, 0, .5)"></i>
                        <!-- 좋아요 안 누른 게시물 -->
                        <% } else if (!likePosts) { %>
                          <i class="fa-regular fa-heart" id="backBtnHeart" data-id="<%= POST._id %>"
                            style="color: #ececec;"></i>
                          <% } %>
                            <% const bookmarkPosts=cUSER.bookmarkPosts.includes(POST._id); %>
                              <% if (bookmarkPosts) { %>
                                <!-- 이미 세이브 했던 게시물일 경우 -->
                                <i class="fa-solid fa-bookmark" id="backBtnBookmark" data-id="<%= POST._id %>"
                                  style="color: #ececec;"></i>
                                <!-- 세이브 안 한 게시물 -->
                                <% } else if (!bookmarkPosts) { %>
                                  <i class="fa-regular fa-bookmark" id="backBtnBookmark" data-id="<%= POST._id %>"
                                    style="color: #ececec;"></i>
                                  <% } %>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div id="commentSection">
            <div id="commentCard">
              <% const filteredCOMMENT=COMMENT.filter(cmt=> cmt.isDeleted === false); %>
                <% const sortedCOMMENT=filteredCOMMENT.sort((a, b)=> a.time.localeCompare(b.time)); %>
                <% if (sortedCOMMENT.length===0) { %>
                <div id="commentEmptyDiv">
                  <span>No one has commented on this postcard yet.</span>
                </div>
                    <% } else { %>
                      <% for (var i=0; i < sortedCOMMENT.length; i++) { %>
                        <div class="commentDiv">
                          <div class="commentImg">
                            <% const cmtUser=USER.find(user=> user.nickname === sortedCOMMENT[i].writer); %>
                              <img src=<%=cmtUser.profileImg %>>
                          </div>
                          <div class="commentMain">
                            <div class="commentTop">
                              <div class="commentTopContent">
                                <div class="commentTopContentWrap">
                                  <span class="commentWriter" data-id="<%= sortedCOMMENT[i].writer %>">
                                    <%= sortedCOMMENT[i].writer %>
                                  </span>
                                  <div class="commentTimeWrap">
                                    <span class="commentTime">
                                      <% const currentTime=luxon.DateTime.local().toISO(); %>
                                      <% const commentTime=luxon.DateTime.fromISO(sortedCOMMENT[i].time); %>
                                      <% const duration=luxon.DateTime.fromISO(currentTime).diff(luxon.DateTime.fromISO(commentTime)); %>
                                      <% let timeAgo=''; %>
                                      <% if (duration.as('seconds') < 60) { timeAgo='just before'; } 
                                      else if (duration.as('minutes') < 60) { 
                                        const minutes = Math.floor(duration.as('minutes'));
                                        timeAgo = minutes === 1 ? `${minutes} minute ago` : `${minutes} minutes ago`; 
                                      } 
                                      else if (duration.as('hours') < 24) {
                                        const hours = Math.floor(duration.as('hours'));
                                        timeAgo = hours === 1 ? `${hours} hour ago` : `${hours} hours ago`; 
                                      } 
                                      else if (duration.as('days') < 7) { 
                                        const days = Math.floor(duration.as('days'));
                                        timeAgo = days === 1 ? `${days} day ago` : `${days} days ago`; 
                                      } 
                                      else if (duration.as('weeks') < 4) {
                                        const weeks = Math.floor(duration.as('weeks'));
                                        timeAgo = weeks === 1 ? `${weeks} week ago` : `${weeks} weeks ago`; 
                                      } 
                                      else if (duration.as('months') < 12) {
                                        const months = Math.floor(duration.as('months'));
                                        timeAgo = months === 1 ? `${months} month ago` : `${months} months ago`; 
                                      } 
                                      else {
                                        timeAgo = 'long time ago'; 
                                      } %>
                                      <%= timeAgo %>
                                    </span>
                                    <span class="commentTimeHover">
                                      <%= luxon.DateTime.fromISO(sortedCOMMENT[i].time).toFormat('yyyy-MM-dd HH:mm') %>
                                    </span>
                                  </div>
                                </div>
                              </div>
                              <div class="commentBtnBundle">
                                <% if (sortedCOMMENT[i].writer===cUSER.nickname) { %>
                                  <i class="fa-regular fa-trash-can commentDeleteBtn"
                                    data-id="<%= sortedCOMMENT[i]._id %>" style="color: rgba(255, 0, 0, .5);"></i>
                                  <% } %>
                                    <% const likeComments=cUSER.likeComments.includes(sortedCOMMENT[i]._id); %>
                                      <% if (!likeComments) { %>
                                        <i class="fa-regular fa-heart commentLikeBtn"
                                          data-id="<%= sortedCOMMENT[i]._id %>" style="color: #ececec;"></i>
                                        <% } else if (likeComments) { %>
                                          <i class="fa-solid fa-heart commentLikeBtn"
                                            data-id="<%= sortedCOMMENT[i]._id %>" style="color: rgba(255, 0, 0, .5)"></i>
                                          <% } %>
                                            <span class="commentLikeSpan">like <%= sortedCOMMENT[i].like %> </span>
                              </div>
                            </div>
                            <div class="commentBottom">
                              <span class="commentContent">
                                <%= sortedCOMMENT[i].content %>
                              </span>
                            </div>
                          </div>
                        </div>
                        <% } %>
                          <% } %>
            </div>
            <div id="commentEditCard">
              <div id="commentEdit">
                <div id="commentEditMain">
                  <div id="commentEditContent">
                    <textarea name="" id="commentEditContentText"
                      placeholder="Write your comments on the postcard!"></textarea>
                  </div>
                  <div id="commentEditBtnBundle">
                    <div id="commentSubmitBtn" data-id="<%= POST._id %>">Submit</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div id="rightSide"></div>
      </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.4.1/jquery.easing.min.js"></script>
    <script src="/public/javascripts/search.js"></script>
    <script src="/public/javascripts/detail.js"></script>
</body>

</html>